apiVersion: batch/v1
kind: Job
metadata:
  name: core-cluster
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
        - name: create-and-apply-resources
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash"]
          args:
            - -ec
            - |-
              echo "Start build"

              cd /tmp

              git clone https://github.com/rhyspowell/rosa-end-to-end-core.git

              cd rosa-end-to-end-core/projects

              file_list=$(ls *.yaml)

              # echo "Found YAML files:"
              # for file in $file_list;
              # do
              # echo "  - $file"
              # json_data=$(python3 -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))' < $file)
              # echo "File data: $json_data"

              # project=$(echo "$json_data" | jq -r '.project // empty')

              # # create_project "$project"

              # cat <<EOF | oc apply -f -
              # apiVersion: project.openshift.io/v1
              # kind: Project
              # metadata:
              #   annotations:
              #     openshift.io/description: ''
              #     openshift.io/display-name: $project_name
              #   labels:
              #     kubernetes.io/metadata.name: $project_name
              #   name: $project_name
              # spec:
              #   finalizers:
              #   - kubernetes
              # EOF
              # done  
              #   # Process users for this project
              #   users=$(echo "$json_data" | jq -r '.users[] | "\(.name):\(.role)"')
              #   for user_info in $users; do
              #     if [ ! -z "$user_info" ]; then
              #       user_name=$(echo "$user_info" | cut -d: -f1)
              #       user_role=$(echo "$user_info" | cut -d: -f2)
              #       create_user_and_role "$project" "$user_name" "$user_role"
              #     fi
              #   done
                
              # done

              # # Configure OAuth with htpasswd if users were created
              # if [ -s users.htpasswd ]; then
              #   echo "Configuring OAuth with htpasswd authentication"
              #   oc create secret generic htpass-secret --from-file=htpasswd=users.htpasswd -n openshift-config --dry-run=client -o yaml | oc apply -f -

              #   cat << EOF | oc apply -f -
              # apiVersion: config.openshift.io/v1
              # kind: OAuth
              # metadata:
              #   name: cluster
              # spec:
              #   identityProviders:
              #   - name: my_htpasswd_provider
              #     mappingMethod: claim
              #     type: HTPasswd
              #     htpasswd:
              #       fileData:
              #         name: htpass-secret
              # EOF
              # fi

              # # argocd
              # cat <<EOF | oc apply -f -
              # ---
              # apiVersion: argoproj.io/v1alpha1
              # kind: ArgoCD
              # metadata:
              #   name: argocd
              #   namespace: $USER_PROJECT
              # spec:
              #   sso:
              #     dex:
              #       openShiftOAuth: true
              #       resources:
              #         limits:
              #           cpu: 500m
              #           memory: 256Mi
              #         requests:
              #           cpu: 250m
              #           memory: 128Mi
              #     provider: dex
              #   rbac:
              #     defaultPolicy: "role:readonly"
              #     policy: "g, system:authenticated, role:admin"
              #     scopes: "[groups]"
              #   server:
              #     insecure: true
              #     route:
              #       enabled: true
              #       tls:
              #         insecureEdgeTerminationPolicy: Redirect
              #         termination: edge
              # EOF

              sleep 20
      restartPolicy: Never
