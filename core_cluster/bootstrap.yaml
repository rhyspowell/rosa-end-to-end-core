apiVersion: batch/v1
kind: Job
metadata:
  name: core-cluster
  namespace: ic-user-projects
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
        - name: create-and-apply-resources
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash"]
          args:
            - -ec
            - |-
              echo "Start build"
              # Function to create project
              create_project() {
                local project_name=$1
                # Create projects
                cat << EOF | oc apply -f-
              apiVersion: project.openshift.io/v1
              kind: Project
              metadata:
                annotations:
                  openshift.io/description: ''
                  openshift.io/display-name: $project_name
                labels:
                  kubernetes.io/metadata.name: $project_name
                  # modelmesh-enabled: 'true'
                  opendatahub.io/dashboard: 'true'
                name: $project_name
              spec:
                finalizers:
                - kubernetes
              EOF
              }

              # Function to create user and assign role
              create_user_and_role() {
                local project_name=$1
                local user_name=$2
                local user_role=$3
                
                echo "Creating user $user_name with role $user_role in project $project_name"
                
                # Create user if it doesn't exist (using htpasswd)
                if ! oc get user $user_name 2>/dev/null; then
                  echo "Creating user $user_name"
                  htpasswd -b users.htpasswd $user_name openshift
                fi
                
                # Create role binding
                cat << EOF | oc apply -f-
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: $user_name-$user_role
                namespace: $project_name
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: $user_role
              subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: $user_name
              EOF
              }

              cd /tmp

              git clone https://github.com/rhyspowell/rosa-end-to-end-core.git

              cd rosa-end-to-end-core/projects

              # Initialize htpasswd file
              touch users.htpasswd

              file_list=$(ls *.yaml)

              echo "Found YAML files:"
              for file in $file_list; do
                echo "  - $file"
                json_data=$(python3 -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))' < $file)
                echo "File data: $json_data"
                project=$(echo "$json_data" | jq -r '.project // empty')

                create_project "$project"
                
                # Process users for this project
                users=$(echo "$json_data" | jq -r '.users[] | "\(.name):\(.role)"')
                for user_info in $users; do
                  if [ ! -z "$user_info" ]; then
                    user_name=$(echo "$user_info" | cut -d: -f1)
                    user_role=$(echo "$user_info" | cut -d: -f2)
                    create_user_and_role "$project" "$user_name" "$user_role"
                  fi
                done
                
              done

              # Configure OAuth with htpasswd if users were created
              if [ -s users.htpasswd ]; then
                echo "Configuring OAuth with htpasswd authentication"
                oc create secret generic htpass-secret --from-file=htpasswd=users.htpasswd -n openshift-config --dry-run=client -o yaml | oc apply -f -

                cat << EOF | oc apply -f -
              apiVersion: config.openshift.io/v1
              kind: OAuth
              metadata:
                name: cluster
              spec:
                identityProviders:
                - name: my_htpasswd_provider
                  mappingMethod: claim
                  type: HTPasswd
                  htpasswd:
                    fileData:
                      name: htpass-secret
              EOF
              fi

              # # argocd
              # cat <<EOF | oc apply -f -
              # ---
              # apiVersion: argoproj.io/v1alpha1
              # kind: ArgoCD
              # metadata:
              #   name: argocd
              #   namespace: $USER_PROJECT
              # spec:
              #   sso:
              #     dex:
              #       openShiftOAuth: true
              #       resources:
              #         limits:
              #           cpu: 500m
              #           memory: 256Mi
              #         requests:
              #           cpu: 250m
              #           memory: 128Mi
              #     provider: dex
              #   rbac:
              #     defaultPolicy: "role:readonly"
              #     policy: "g, system:authenticated, role:admin"
              #     scopes: "[groups]"
              #   server:
              #     insecure: true
              #     route:
              #       enabled: true
              #       tls:
              #         insecureEdgeTerminationPolicy: Redirect
              #         termination: edge
              # EOF

              sleep 20
      restartPolicy: Never
